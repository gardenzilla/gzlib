syntax = "proto3";
package upl;
import "prelude.proto";

/*
1. Létrehozni
2. Lekérni ID alapján
3. Lekérni helyszín alapján
4. Lekérni Lock alapján
5. Áthelyezni MOVE
6. Szavidő frissítés
7. Szétválasztani SPLIT
8. Kimérni DIVIDE
9. Egyesíteni MERGE
*/

service Upl {
  rpc SetReservation(ReservationRequest) returns (ReservationResponse);
  // // Create new UPL
  // // Just from a procurement or inventory service!
  // // No public API should be implemented!
  // rpc CreateNew(CreateNewRequest) returns (CreateNewResponse);
  // // Get UPL by ID
  // rpc GetById(GetUplRequest) returns (GetUplResponse);
  // // Filters: id, sku, product, location
  // // Returns only the UPL IDs
  // rpc GetBulkByFilter(e) returns (e);
  // // Move a UPL from location A to location B
  // rpc Move(MoveRequest) returns (MoveResponse);
  // // Modify best before date
  // // This should not use at all
  // // As this info should be correctly provided by
  // // the procurement process
  // // The only possible usage to correct a bestbefore date
  // // error during inventory check.
  // rpc SetBestBefore(e) returns (e);
  // rpc Split(e) returns (e);
  // // Lock a UPL that means its cannot be moved
  // // and cannot be modified.
  // // The idea is to use it as a cart lock to
  // // signal that the upl is in a cart
  // // Should be private API
  // rpc Lock(e) returns (e);
  // // Unlock a UPL that means it can be moved
  // // to another location and can be modified.
  // // Should be private API.
  // rpc Unlock(e) returns (e);
}

message e {}

message ReservationRequest {
  message Local {
    string cart_id = 1;
    string stock_id = 2;
    oneof Subject {
      uint32 sku = 3;
      uint32 divided_product = 4;
    }
    uint32 reserved_amount = 5;
  }
  message Global {
    string cart_id = 1;
    oneof Subject {
      uint32 sku = 2;
      uint32 divided_product = 3;
    }
    uint32 reserved_amount = 4;
  }
  oneof reservation {
    Local local = 1;
    Global global = 2;
  }
}

message ReservationResponse {
  message Local {
    string cart_id = 1;
    string stock_id = 2;
    oneof Subject {
      uint32 sku = 3;
      uint32 divided_product = 4;
    }
    uint32 reserved_amount = 5;
    uint32 taken_amount = 6;
  }
  message Global {
    string cart_id = 1;
    oneof Subject {
      uint32 sku = 2;
      uint32 divided_product = 3;
    }
    uint32 reserved_amount = 4;
    uint32 taken_amount = 5;
  }
  oneof reservation {
    Local local = 1;
    Global global = 2;
  }
}

message UplObj {
  // UPL ID
  string id = 1;
  // Related product id
  uint32 product_id = 2;
  // Related SKU if there is any, otherwise 0
  uint32 sku = 3;
  // Best before date (NaiveDate YYYY-MM-DD) if there is any
  string best_before = 4;
  // If there is any deprecation data
  bool is_depreciated = 5;
  // Deprecation id; only if depreciated
  uint32 depreciation_id = 6;
  // Deprecation comment; only if depreciated
  string depreciation_comment = 7;
  // Deprecation net price; only if depreciated
  uint32 depreciation_net_price = 8;
  // Procurement id
  uint32 procurement_id = 9;
  // Procurement net price
  uint32 procurement_net_price = 10;
  // Is it divisible? Only if SKU or Derived Product and is divisible
  bool is_divisible = 11;
  // Divisible amount; if divisible; otherwise 0
  uint32 divisible_amount = 12;
  // If there any applied lock
  bool is_locked = 13;
  // If locked; lock kind
  string lock_kind = 14;
  // If locked; lock id
  uint32 lock_id = 15;
  // Location kind
  string location_kind = 16;
  // Location ID
  uint32 location_id = 17;
  // UPL kind
  string upl_kind = 18;
  // If upl_kind is BULK ? true : false
  bool is_kind_bulk = 19;
  // If upl_kind is OpenedSku ? true : false
  bool is_kind_opened = 20;
  // If upl_kind is Sku ? true : false
  bool is_kind_original = 21;
  // If upl_kind is DerivedProduct ? true : false
  bool is_kind_derived = 22;
  // If upl is archived ? true : false
  bool is_archived = 23;
  // History vector
  repeated string history = 24;
  // Created by user
  string created_by = 25;
  // Created at RFC3339
  string created_at = 26;
}